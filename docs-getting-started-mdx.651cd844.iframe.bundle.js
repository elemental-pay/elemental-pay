"use strict";(self.webpackChunk_elemental_pay_web=self.webpackChunk_elemental_pay_web||[]).push([[547],{"./stories/docs/getting-started.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>getting_started});__webpack_require__("./node_modules/next/dist/compiled/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");__webpack_require__("./node_modules/@storybook/nextjs/dist/images/next-image.mjs");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",h2:"h2",pre:"pre",code:"code",a:"a",h3:"h3"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Components/Getting Started"}),"\n",(0,jsx_runtime.jsx)("style",{children:"\n    .subheading {\n      --mediumdark: '#999999';\n      font-weight: 700;\n      font-size: 13px;\n      color: #999;\n      letter-spacing: 6px;\n      line-height: 24px;\n      text-transform: uppercase;\n      margin-bottom: 12px;\n      margin-top: 40px;\n    }\n\n    .link-list {\n      display: grid;\n      grid-template-columns: 1fr;\n      grid-template-rows: 1fr 1fr;\n      row-gap: 10px;\n    }\n\n    @media (min-width: 620px) {\n      .link-list {\n        row-gap: 20px;\n        column-gap: 20px;\n        grid-template-columns: 1fr 1fr;\n      }\n    }\n\n    @media all and (-ms-high-contrast:none) {\n    .link-list {\n        display: -ms-grid;\n        -ms-grid-columns: 1fr 1fr;\n        -ms-grid-rows: 1fr 1fr;\n      }\n    }\n\n    .link-item {\n      display: block;\n      padding: 20px;\n      border: 1px solid #00000010;\n      border-radius: 5px;\n      transition: background 150ms ease-out, border 150ms ease-out, transform 150ms ease-out;\n      color: #333333;\n      display: flex;\n      align-items: flex-start;\n    }\n\n    .link-item:hover {\n      border-color: #1EA7FD50;\n      transform: translate3d(0, -3px, 0);\n      box-shadow: rgba(0, 0, 0, 0.08) 0 3px 10px 0;\n    }\n\n    .link-item:active {\n      border-color: #1EA7FD;\n      transform: translate3d(0, 0, 0);\n    }\n\n    .link-item strong {\n      font-weight: 700;\n      display: block;\n      margin-bottom: 2px;\n    }\n\n    .link-item-img-wrapper {\n      height: 40px;\n      width: 40px;\n      margin-right: 15px;\n      flex: none;\n    }\n\n    .link-item span,\n    .link-item p {\n      margin: 0;\n      font-size: 14px;\n      line-height: 20px;\n    }\n\n    .tip {\n      display: inline-block;\n      border-radius: 1em;\n      font-size: 11px;\n      line-height: 12px;\n      font-weight: 700;\n      background: #E7FDD8;\n      color: #66BF3C;\n      padding: 4px 12px;\n      margin-right: 10px;\n      vertical-align: top;\n    }\n\n    .tip-wrapper {\n      font-size: 13px;\n      line-height: 20px;\n      margin-top: 40px;\n      margin-bottom: 40px;\n    }\n\n    .tip-wrapper code {\n      font-size: 12px;\n      display: inline-block;\n    }\n  "}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"welcome-to-elemental-pay",children:"Welcome to Elemental Pay"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Elemental Pay provides React components for invoicing users with cryptocurrencies such as Zcash."}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npm install @elemental-pay/components\n"})}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:'import { InvoiceElement } from \'@elemental-pay/components\';\n\nexport default () => {\n  return (\n    <InvoiceElement\n      address="u17cfedft692aczpny0yk498057jq8chdu4lsme6ucd5j0np479983rrwprl3usnhn0580gdqmckrftr0ge3mt5dts6jfer66sqyhgy4cltz2zhq0mm73s24cypsvctr0e6mzx3wkv72nayhkjrfqt8ka0yemrwuyaxrm03l63rydamxch"\n      amount={0.01}\n      components={{}}\n      currency="ZEC"\n      memo="Sent with Elemental Pay"\n      onCopyPress={() => {}}\n    />\n  );\n}\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"more-advanced-zcash-invoice-example",children:"More Advanced Zcash Invoice Example"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Example pulled from ZPublish app."}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"GraphQL backend for live payment listening/processing uses these server libraries (can be run as a Docker service):"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"https://github.com/elemental-pay/wallet-service"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["You can find a sample ",(0,jsx_runtime.jsx)(_components.code,{children:"wallet-service"}),"/",(0,jsx_runtime.jsx)(_components.code,{children:"zingo-node"})," integration here: ",(0,jsx_runtime.jsx)(_components.a,{href:"https://github.com/zpublish/platform/blob/9b7bb0d99be01edc29d727d2e5346897e2ed3555/packages/web/pages/api/graphql/resolvers/invoice.resolver.ts",target:"_blank",rel:"nofollow noopener noreferrer",children:"github.com/zpublish/platform/9b7bb0d99be01edc29d727d2e5346897e2ed3555"})," (permalink)"]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Or ",(0,jsx_runtime.jsx)(_components.a,{href:"https://github.com/zpublish/platform/blob/master/packages/web/pages/api/graphql/resolvers/invoice.resolver.ts",target:"_blank",rel:"nofollow noopener noreferrer",children:"github.com/zpublish/platform/.../invoice.resolver.ts"})," for a more up-to-date version."]}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"userinvoicetsx",children:"UserInvoice.tsx"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:"import { useEffect, useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { InvoiceElement } from '@elemental-pay/components';\n\nimport { graphql } from '../../graphql/types';\nimport { CurrencyCode } from '../../graphql/types/graphql';\nimport { copyTextToClipboard } from '../../utils';\nimport { WalletButtonContainer } from './WalletButtonContainer';\nimport { Box, Text } from 'elemental-react';\n\nconst CREATE_INVOICE = graphql(`\n  mutation createInvoice($input: InvoiceInput!) {\n    createInvoice(input: $input) {\n      id\n      invoiceId\n      status\n      price\n      currency\n    }\n  }\n`);\n\nconst GET_INVOICE = graphql(`\n  query invoice($id: ID!) {\n    invoice(id: $id) {\n      __typename\n      ...on Invoice {\n        id\n        price\n        currency\n        status\n      }\n      ...on InvoiceNotFoundError {\n        message\n        code\n      }\n    }\n  }\n`);\n\nconst MIN_POLL_SECONDS = 1;\nconst MAX_POLL_SECONDS = 10;\n\nconst UserInvoice = ({ id, price, zcashaddress, memo, onPaymentSuccess }) => {\n  const [shouldStartPolling, setShouldStartPolling] = useState<boolean>(false);\n  const [pollingInterval, setPollingInterval] = useState<number>(MIN_POLL_SECONDS * 1000); // Initial interval: 1 second\n\n  const [invoiceId, setInvoiceId] = useState<string | null>(null);\n  const { data, loading, error, startPolling, stopPolling } = useQuery(GET_INVOICE, {\n    variables: { id: id || '' },\n    skip: !shouldStartPolling,\n  });\n  const [createInvoice] = useMutation(CREATE_INVOICE);\n  const { invoice } = data || {};\n\n  const startPollingWithLogarithmicBackoff = () => {\n    startPolling(pollingInterval);\n\n    // Increase the interval logarithmically, with a cap at 10 seconds\n    // setPollingInterval((prevInterval) => Math.min(prevInterval * 2, MAX_POLL_SECONDS * 1000));\n  };\n\n\n  // Optional dynamic interval polling (disabled - requires extra changes and testing)\n  useEffect(() => {\n    if (shouldStartPolling) {\n      startPolling(pollingInterval);\n    }\n\n    return () => {\n      stopPolling();\n    };\n  }, [shouldStartPolling, pollingInterval]);\n\n  useEffect(() => {\n    if (invoice?.__typename === 'Invoice' && invoice?.status === 'paid') {\n      onPaymentSuccess();\n    }\n  }, [invoice])\n\n  useEffect(() => {\n    if (id && !shouldStartPolling) {\n      setShouldStartPolling(true);\n    }\n  }, [id, startPolling, stopPolling]);\n\n  return (\n    <>\n      <Box>\n        {id && (\n          <Text center py={20}>\n            Status: {invoice?.__typename === 'Invoice' && invoice?.status === 'paid' ? 'Paid' : 'Waiting'}\n          </Text>\n        )}\n        <InvoiceElement\n          currency=\"ZEC\"\n          amount={price}\n          address={zcashaddress}\n          memo={memo}\n          onCopyPress={async () => {\n            if (!zcashaddress) {\n              return;\n            }\n            await copyTextToClipboard(`zcash:${zcashaddress}?amount=${price}&memo=${memo}`);\n          }}\n          components={{\n            WalletButtonContainer: (props) => <WalletButtonContainer href={`zcash:${zcashaddress}?amount=${price}&memo=${memo}`} {...props} />\n          }}\n        />\n      </Box>\n    </>\n  )\n};\n\nexport default UserInvoice;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"invoicepagetsx",children:"InvoicePage.tsx"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-tsx",children:"{{\n  [InvoiceStage.CHOOSE_AMOUNT]: (\n    <Formik\n      initialValues={{ amount: amount, currency: initialCurrency, memo: 'Sent From Elemental Zcash' }}\n      validationSchema={ChooseAmountSchema}\n      onSubmit={async (values) => {\n        if (!userData.zcashaddress) { return; }\n        const { data } = await createInvoice({\n          variables: { input: { address: userData.zcashaddress, currency: CurrencyCode.Zec, price: Number(values.amount) }},    \n        })\n        if (data?.createInvoice?.id) {\n          router.replace({\n            query: { ...router.query, invoice_id: data.createInvoice.id, amount: values.amount },\n         });\n        }\n        setInvoiceStage(InvoiceStage.INVOICE);\n        setAmount(values.amount);\n        setMemo(toBase64(unescape(encodeURIComponent(values.memo))).replace('=', ''));\n      }}\n    >\n      {({ values, setFieldValue, errors, touched, handleChange, handleSubmit }) => (\n        <>\n          {values.amount && (\n            <Box>\n              <Text center fontSize={32} mb={40}>\n              {`SEND ${values.amount} ${values.currency}`}{'\\n'}\n              {`TO @${userData?.username || userData?.name || userData?.id}`}\n              </Text>\n            </Box>\n          )}\n        <Box>\n          <InputField\n            width=\"100%\"\n            label=\"Amount\"\n            error={touched.amount && errors.amount}\n            value={values.amount}\n          >\n            {({ label, value }) =>\n              <TextInput\n                placeholder={label}\n                // @ts-ignore\n                value={value}\n                onChange={handleChange('amount')}\n                pb={0}\n                px={3}\n                borderWidth={1}\n                borderRadius={4}\n                height={40}\n                borderColor=\"#e2e2f2\"\n              />\n            }\n          </InputField>\n          <InputField\n            width=\"100%\"\n            label=\"Memo\"\n            error={touched.memo && errors.memo}\n            value={values.memo}\n          >\n            {({ label, value }) =>\n              <AutoTextArea\n                onChangeText={text => setFieldValue('memo', text)}\n                placeholder={label}\n                value={values['memo']}\n              />\n            }\n          </InputField>\n          <Text bold fontWeight=\"bold\" mb={12}>\n            {'Currency: '}\n          </Text>{/* @ts-ignore */}\n          <Select defaultValue={currencyOptions[0]} options={currencyOptions} />\n        \n          <Button mt={24} m={0} disabled={touched.amount && errors.amount || errors.currency} onPress={handleSubmit}>NEXT</Button>\n        </Box>\n        </>\n      )}\n    </Formik>\n  ),\n  [InvoiceStage.INVOICE]: (\n    <>\n      <Section width=\"100%\" maxWidth={640}>\n        <UserInvoice\n          id={invoice_id}\n          price={amount}\n          zcashaddress={userData?.zcashaddress}\n          memo={memo}\n          onPaymentSuccess={() => {\n            // setPaymentSuccessful(true);\n            setInvoiceStage(InvoiceStage.INVOICE_PAID);\n          }}\n        />\n      </Section>\n    </>\n  ),\n  [InvoiceStage.INVOICE_PAID]: (\n    <Box>\n      <Text fontSize={24}>Success! The donation has been paid.</Text>\n    </Box>\n  )\n}[invoiceStage]}\n"})}),"\n"]})}const getting_started=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);